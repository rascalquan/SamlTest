using SAML2;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography.Xml;
using System.Text;
using System.Web;
using System.Xml;

namespace SeamTest2.BLL
{
    public class SesameUtils2
    {

        public XmlDocument GetAuthnRequest(string issuer)
        {
            var authnRequest = new Saml20AuthnRequest();
            authnRequest.Issuer = "urn:cardif:saf:sp:test:" + issuer;
            authnRequest.IssueInstant = DateTime.Now;
            authnRequest.Id = "a1234567890";
            //authnRequest.Destination = "https://localhost:8443/sesame_saf/redirect/sso/1/2";
            //authnRequest.AssertionConsumerServiceUrl = "http://localhost:60722/Home/Acs";
            //authnRequest.ProtocolBinding = "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect";
            var xmlDocument = authnRequest.GetXml();

            var doc2 = new XmlDocument();
            doc2.PreserveWhitespace = false;
            //doc2.AppendChild(doc2.CreateProcessingInstruction("xml", "version=\"1.0\""));
            doc2.AppendChild(doc2.ImportNode(xmlDocument.DocumentElement, true));
            return doc2;
        }


        public XmlDocument CallSoap(XmlDocument payload)
        {
            // Fiddler
            //var web = WebRequest.CreateHttp("https://localhost.fiddler:8443/sesame_saf/soap/sso/1/2");
            var web = WebRequest.CreateHttp("https://localhost:8443/sesame_saf/soap/sso/1/2");
            web.Method = "POST";

            var store = new X509Store(StoreName.My, StoreLocation.CurrentUser);
            store.Open(OpenFlags.ReadOnly);
            // using cert provided with SAF Mock
            var cert = store.Certificates.Find(X509FindType.FindBySerialNumber, "09DFDF82", true)[0];
            web.ClientCertificates.Add(cert);

            web.Headers.Add("SOAPAction: \"http://www.oasis-open.org/committees/security\"");

            var req = web.GetRequestStream();
            var buffer =
                System.Text.Encoding.UTF8.GetBytes(
                    "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"><s:Body>");
            req.Write(buffer, 0, buffer.Length);

            if (payload.FirstChild is XmlProcessingInstruction)
                payload.RemoveChild(payload.FirstChild);
            payload.PreserveWhitespace = true;
            payload.Save(req);

            buffer = System.Text.Encoding.UTF8.GetBytes(
                    "</s:Body></s:Envelope>");
            req.Write(buffer, 0, buffer.Length);
            var response = web.GetResponse();

            var doc = new XmlDocument();
            doc.Load(response.GetResponseStream());

            var nsmgr = new XmlNamespaceManager(doc.NameTable);
            nsmgr.AddNamespace("s", "http://schemas.xmlsoap.org/soap/envelope/");
            var fault = doc.SelectSingleNode("//s:Fault", nsmgr);
            if (fault != null)
            {
                throw new InvalidOperationException(fault.InnerXml);
            }

            var result = new XmlDocument();
            result.AppendChild(result.ImportNode(doc.SelectSingleNode("//s:Body", nsmgr).FirstChild, true));
            return result;
        }

        public XmlDocument SignXmlDocumentFinal(XmlDocument xmlDocument, X509Certificate2 certificate, bool useRefId)
        {
            // Really necessary to canonicalize the digest itself. Without it, it does not work (signature
            // verification fails on JAVA side)!!!

            // Gyozo : Looks it does not really necessary
            //var c14n = new XmlDsigExcC14NTransform();
            //c14n.LoadInput(xmlDocument);
            //xmlDocument = new XmlDocument();
            //xmlDocument.Load(c14n.GetOutput() as Stream);
            // Gyozo : end of commented code

            //Trace.WriteLine(xmlDocument.OuterXml);
            //xmlDocument.Save("1_canonical.xml");

            var signedXml = new SignedXml(xmlDocument);
            //// Gyozo : Necessary to use certificate generated by openssl
            /// Without it the SHA256 method works only with SmartCard and Mock's certificates
            var exportedKeyMaterial = certificate.PrivateKey.ToXmlString( /* includePrivateParameters = */ true);
            var key = new RSACryptoServiceProvider(new CspParameters(24 /* PROV_RSA_AES */));
            key.PersistKeyInCsp = false;
            key.FromXmlString(exportedKeyMaterial);
            //// Gyozo : end

            signedXml.SigningKey = key; // Gyozo - certificate.PrivateKey;
            signedXml.SignedInfo.SignatureMethod = "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256";
            signedXml.SignedInfo.CanonicalizationMethod = SignedXml.XmlDsigExcC14NTransformUrl;

            Reference reference;

            if (useRefId)
            {
                // reference set explicitly, which (IMO) is better
                reference = new Reference("#a1234567890");
            }
            else
            {
                reference = new Reference("");
            }

            reference.AddTransform(new XmlDsigEnvelopedSignatureTransform());
            reference.AddTransform(new XmlDsigExcC14NTransform());
            signedXml.AddReference(reference);

            // Also calculate digest, but seems to be not performing its canonicalization first. Therefore
            // explicit canonicalization in the beginning.
            signedXml.ComputeSignature();

            // No need to add "ds:" NS prefix explicitly here. JAVA is, correctly, able to handle both.
            var signature = xmlDocument.ImportNode(signedXml.GetXml(), true) as XmlElement;
            xmlDocument.DocumentElement.AppendChild(signature);

            Trace.WriteLine(xmlDocument.OuterXml);

            return xmlDocument;
        }

        /*
        private static X509Certificate2 GetSigningCertificate()
        {
            var store = new X509Store(StoreName.My, StoreLocation.CurrentUser);
            store.Open(OpenFlags.ReadOnly);
            return store.Certificates.Find(X509FindType.FindBySerialNumber, "09dfdf83", true)[0];
            //return store.Certificates.Find(X509FindType.FindBySubjectDistinguishedName, "CN=WINGS", true)[0];
        }
        */

        public static X509Certificate2 GetSigningCertificate()
        {
            var cer = Convert.FromBase64String("MIIDUjCCAjqgAwIBAgIEUOLIQTANBgkqhkiG9w0BAQUFADBrMQswCQYDVQQGEwJGSTEQMA4GA1UECBMHVXVzaW1hYTERMA8GA1UEBxMISGVsc2lua2kxGDAWBgNVBAoTD1JNNSBTb2Z0d2FyZSBPeTEMMAoGA1UECwwDUiZEMQ8wDQYDVQQDEwZhcG9sbG8wHhcNMTMwMTAxMTEyODAxWhcNMjIxMjMwMTEyODAxWjBrMQswCQYDVQQGEwJGSTEQMA4GA1UECBMHVXVzaW1hYTERMA8GA1UEBxMISGVsc2lua2kxGDAWBgNVBAoTD1JNNSBTb2Z0d2FyZSBPeTEMMAoGA1UECwwDUiZEMQ8wDQYDVQQDEwZhcG9sbG8wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCXqP0wqL2Ai1haeTj0alwsLafhrDtUt00E5xc7kdD7PISRA270ZmpYMB4W24Uk2QkuwaBp6dI/yRdUvPfOT45YZrqIxMe2451PAQWtEKWF5Z13F0J4/lB71TtrzyH94RnqSHXFfvRN8EY/rzuEzrpZrHdtNs9LRyLqcRTXMMO4z7QghBuxh3K5gu7KqxpHx6No83WNZj4B3gvWLRWv05nbXh/F9YMeQClTX1iBNAhLQxWhwXMKB4u1iPQ/KSaal3R26pONUUmu1qVtU1quQozSTPD8HvsDqGG19v2+/N3uf5dRYtvEPfwXN3wIY+/R93vBA6lnl5nTctZIRsyg0Gv5AgMBAAEwDQYJKoZIhvcNAQEFBQADggEBAFQwAAYUjso1VwjDc2kypK/RRcB8bMAUUIG0hLGL82IvnKouGixGqAcULwQKIvTs6uGmlgbSG6Gn5ROb2mlBztXqQ49zRvi5qWNRttir6eyqwRFGOM6A8rxj3Jhxi2Vb/MJn7XzeVHHLzA1sV5hwl/2PLnaL2h9WyG9QwBbwtmkMEqUt/dgixKb1Rvby/tBuRogWgPONNSACiW+Z5o8UdAOqNMZQozD/i1gOjBXoF0F5OksjQN7xoQZLj9xXefxCFQ69FPcFDeEWbHwSoBy5hLPNALaEUoa5zPDwlixwRjFQTc5XXaRpgIjy/2gsL8+Y5QRhyXnLqgO67BlLYW/GuHE=");
            var pkey =
                Convert.FromBase64String(
                    "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCXqP0wqL2Ai1haeTj0alwsLafhrDtUt00E5xc7kdD7PISRA270ZmpYMB4W24Uk2QkuwaBp6dI/yRdUvPfOT45YZrqIxMe2451PAQWtEKWF5Z13F0J4/lB71TtrzyH94RnqSHXFfvRN8EY/rzuEzrpZrHdtNs9LRyLqcRTXMMO4z7QghBuxh3K5gu7KqxpHx6No83WNZj4B3gvWLRWv05nbXh/F9YMeQClTX1iBNAhLQxWhwXMKB4u1iPQ/KSaal3R26pONUUmu1qVtU1quQozSTPD8HvsDqGG19v2+/N3uf5dRYtvEPfwXN3wIY+/R93vBA6lnl5nTctZIRsyg0Gv5AgMBAAECggEBAJZmt1jnLq9pAWEP8MSrKeeCC4iJBnnYImBnUKn5zLcq6Ajrz8A+RN5aMazXXK4TMsEUsqH2iVRKd4HIuTP3v6G5lumFxM2B4wJzcA6WgKBN+yAciAZ3ppd3+qrKytn8v3eRDoKiiWM1kmUbwbnOTg4aNIGxplfwHxdCt7lEmgUPIpkZvHaytidIZI2cn/3twteiiwLezJib5MBKYsGt2Q7UVTgJL7QI33p16UfQH7KE053zOyUSW1PJr2Ai3ltHUoNNAL+LhLlLdQZ5/c+MR20ZV+1XMavmdFRWwqsYA732vEpT0mpznaP901kz1NX6JLqnqFl4m1IHQJVy/dLMBOUCgYEA54eb1U6dxKx4R+ev5NpIbDY0mSKHamRqxz5JE8iEQk6jtnM5DR5kH4iLbW2N0W3nmm6yp46QclT7QEggijZJ/IoSh4RLoafiS0+kYgXN+CK+0eoDVENiljYTpI8gmvFgQ0G094fWfU7P9du97tKjr2jqJNqpwvVcrd7xIHjm64sCgYEAp7BivZVOZNK5aLohYcsL48956ohlpRxnDlScKXco2y5AoPZiKr0ApvDSHYLmyVFbAAsOGOhjorGrv4e+T0yilq51NFTybvwmQKO2PcqN0T2ery0VwDk1Lwk4jejV7bhH1LeBweFCInHwqLXf5L+ZpcuI+vf58L5WPbnX3QfKhwsCgYAfw3P2lJ2CYOLzgm6YJ/YtmlYm+By51OLtSLc/1o+GhUFig3Y9PYEg7luqfJArPje68Rrjb+STOuNpUzvbmk0WL18RZm311JFwIZH8vK0gMKwbIk6oncIFt4+EUPp5J0o8j+Qi3WjosgpHwYjSHeXE59DPk4wcqgq389EC0nNjtwKBgHMOhIF+O37UU2E3LQZzkiHqTsWMdum2NkPP7CJLX14cOz32L98RNaxV2mVjVsTVLHI4I6EVep+79pMBKaQxefGXnFWe34UlP33klnuJSotCE2owrhbpacNvOT2tf3OPmMGsc7y6uWz27uBjgk7q5BqtL7y7fuQfRP8vT5yZ5u2HAoGBALMzjbrAqFdrMFay70+AH4JP97ibs9N8nk1DY+Y2YamT3+8S8em3zKBLA/kqMGfbVZ459NoD1UrnfeAYULXlPPYg5qmTqP8TM54n6REYwwiDPLSi1rBNZEjXtYSK/woyfTGFMH4ba6TpxTkhWT5BeuzZSScaCWlTSpIm7cvCmW1Z");

            var x509 = new X509Certificate2(cer);
            var rsa = new RSACryptoServiceProvider();
            rsa.FromXmlString("<RSAKeyValue><Modulus>l6j9MKi9gItYWnk49GpcLC2n4aw7VLdNBOcXO5HQ+zyEkQNu9GZqWDAeFtuFJNkJLsGgaenSP8kXVLz3zk+OWGa6iMTHtuOdTwEFrRClheWddxdCeP5Qe9U7a88h/eEZ6kh1xX70TfBGP687hM66Wax3bTbPS0ci6nEU1zDDuM+0IIQbsYdyuYLuyqsaR8ejaPN1jWY+Ad4L1i0Vr9OZ214fxfWDHkApU19YgTQIS0MVocFzCgeLtYj0Pykmmpd0duqTjVFJrtalbVNarkKM0kzw/B77A6hhtfb9vvzd7n+XUWLbxD38Fzd8CGPv0fd7wQOpZ5eZ03LWSEbMoNBr+Q==</Modulus><Exponent>AQAB</Exponent><P>54eb1U6dxKx4R+ev5NpIbDY0mSKHamRqxz5JE8iEQk6jtnM5DR5kH4iLbW2N0W3nmm6yp46QclT7QEggijZJ/IoSh4RLoafiS0+kYgXN+CK+0eoDVENiljYTpI8gmvFgQ0G094fWfU7P9du97tKjr2jqJNqpwvVcrd7xIHjm64s=</P><Q>p7BivZVOZNK5aLohYcsL48956ohlpRxnDlScKXco2y5AoPZiKr0ApvDSHYLmyVFbAAsOGOhjorGrv4e+T0yilq51NFTybvwmQKO2PcqN0T2ery0VwDk1Lwk4jejV7bhH1LeBweFCInHwqLXf5L+ZpcuI+vf58L5WPbnX3QfKhws=</Q><DP>H8Nz9pSdgmDi84JumCf2LZpWJvgcudTi7Ui3P9aPhoVBYoN2PT2BIO5bqnyQKz43uvEa42/kkzrjaVM725pNFi9fEWZt9dSRcCGR/LytIDCsGyJOqJ3CBbePhFD6eSdKPI/kIt1o6LIKR8GI0h3lxOfQz5OMHKoKt/PRAtJzY7c=</DP><DQ>cw6EgX47ftRTYTctBnOSIepOxYx26bY2Q8/sIktfXhw7PfYv3xE1rFXaZWNWxNUscjgjoRV6n7v2kwEppDF58ZecVZ7fhSU/feSWe4lKi0ITajCuFulpw285Pa1/c4+YwaxzvLq5bPbu4GOCTurkGq0vvLt+5B9E/y9PnJnm7Yc=</DQ><InverseQ>szONusCoV2swVrLvT4Afgk/3uJuz03yeTUNj5jZhqZPf7xLx6bfMoEsD+SowZ9tVnjn02gPVSud94BhQteU89iDmqZOo/xMznifpERjDCIM8tKLWsE1kSNe1hIr/CjJ9MYUwfhtrpOnFOSFZPkF67NlJJxoJaVNKkibty8KZbVk=</InverseQ><D>lma3WOcur2kBYQ/wxKsp54ILiIkGedgiYGdQqfnMtyroCOvPwD5E3loxrNdcrhMywRSyofaJVEp3gci5M/e/obmW6YXEzYHjAnNwDpaAoE37IByIBneml3f6qsrK2fy/d5EOgqKJYzWSZRvBuc5ODho0gbGmV/AfF0K3uUSaBQ8imRm8drK2J0hkjZyf/e3C16KLAt7MmJvkwEpiwa3ZDtRVOAkvtAjfenXpR9AfsoTTnfM7JRJbU8mvYCLeW0dSg00Av4uEuUt1Bnn9z4xHbRlX7Vcxq+Z0VFbCqxgDvfa8SlPSanOdo/3TWTPU1fokuqeoWXibUgdAlXL90swE5Q==</D></RSAKeyValue>");

            x509.PrivateKey = rsa;
            return x509;
        }

        public static X509Certificate2 GetSigningCertificateGera()
        {
            X509Certificate2 cert = new X509Certificate2("server.p12", "pass", X509KeyStorageFlags.Exportable);
            return cert;
        }

        public static X509Certificate2 GetX509Certificate2FromSmartCard()
        {
            X509Store store = new X509Store(StoreLocation.CurrentUser);
            store.Open(OpenFlags.ReadOnly);
            X509Certificate2Collection collection = store.Certificates;
            foreach (X509Certificate2 c in collection)
            {
                if (!c.HasPrivateKey) continue;  //not smart card  for sure
                var rsa = c.PrivateKey as RSACryptoServiceProvider;
                if (rsa == null) continue;  //not smart card cert again
                if (rsa.CspKeyContainerInfo.HardwareDevice)  // tuti - smart card 
                {
                    return c;
                }
            }
            return null;
        }

        public string GetSAMLHttpRedirectUri(string idpUri, string saml)
        {
            var bytes = Encoding.UTF8.GetBytes(saml);
            var base64 = Convert.ToBase64String(bytes);
            var urlEncode = HttpUtility.UrlEncode(base64);
            return string.Concat(idpUri, "?SAMLRequest=", urlEncode);
        }

        public string DecodeSAMLResponse(string response)
        {
            var utf8 = Encoding.UTF8;
            var bytes = utf8.GetBytes(response);
            var base64 = utf8.GetString(bytes);
            return utf8.GetString(Convert.FromBase64String(base64));
        }
    }
}